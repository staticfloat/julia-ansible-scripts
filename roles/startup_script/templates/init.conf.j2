#!/bin/sh
#
# Let's do some systemd init magic:
## BEGIN INIT INFO
# Provides: {{service_name}}
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
## END INIT INFO
#
# Let's also try for some redhat-style init magic:
# {{service_name}}
# chkconfig: 2345 90 60
# description: Autogenerated script from ansible for {{service_name}}
PGIDFILE="/tmp/{{service_name}}.pgid"
if [[ -d "/var/log" ]]; then
	LOGFILE="/var/log/{{service_name}}.log"
else
	LOGFILE="/tmp/{{service_name}}.log"
fi

if [ ! -x "{{daemon_name}}" ]; then
	echo "ERROR: Can't execute {{daemon_name}}."
	exit 1
fi

start_service() {
	echo -n " * Starting {{service_name}}... "

	# Put custom launcher script in /tmp...
	cat <<- EOF > "/tmp/{{service_name}}.launch"
		#!/bin/bash
		cd {{chdir}}

		{{script_setup}}

		# Write out our process group id to the PGIDFILE
		echo \$(ps -o pgid= \$\$) > "$PGIDFILE"

		until {{daemon_name}} {{daemon_opts}}; do
			echo "Server crashed with exit code $?.  Respawning..."
			sleep 1
		done
	EOF
	chmod +x "/tmp/{{service_name}}.launch"
	touch "$PGIDFILE"
	chown "{{user}}" "$PGIDFILE"
	(sudo -H -u "{{user}}" "/tmp/{{service_name}}.launch") >> "$LOGFILE" 2>&1 &
	echo "done"
}

stop_service() {
	if [ -f "$PGIDFILE" ]; then
		echo -n " * Stopping {{service_name}}... "
		kill -- -$(cat "$PGIDFILE")
		rm -f "$PGIDFILE"
		echo "done"
	else
		echo "* {{service_name}} not running, or pgid file not present: $PGIDFILE"
	fi
}

status_service() {
		echo -n "Checking {{service_name}}..."
		if [ -f "$PGIDFILE" ]; then
				PGID=`cat "$PGIDFILE"`
				if [ -z "`ps xo pgid | grep ${PGID} | grep -v grep`" ]; then
						echo "Process dead but pgidfile exists"
						exit 1
				else
						echo "Running"
				fi
		else
				echo "Service not running"
				exit 3
		fi
}

case "$1" in
	status)
		status_service
		;;
	start)
		start_service
		;;
	stop)
		stop_service
		;;
	restart)
		stop_service
		start_service
		;;
	*)
		echo "Usage: service {{service_name}} {start|stop|restart|status}" >&2
		exit 1
		;;
esac

exit 0
